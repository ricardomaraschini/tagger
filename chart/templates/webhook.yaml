{{- /*
Here we generate a self signed certificate to use if user has not provided us with one
through .Values.cert and .Values.key. Once this chart is installed we never change the
certificates.
*/}}
{{- $altNames := list ( printf "mutating-webhooks.%s.svc" .Release.Namespace ) }}
{{- $ca := genCA "tagger" 365 }}
{{- $cert := genSignedCert "tagger" nil $altNames 365 $ca }}
{{- $secret := (lookup "v1" "Secret" .Release.Namespace "certs" ) }}
---
apiVersion: v1
kind: Secret
metadata:
  name: certs
  namespace: {{ .Release.Namespace }}
type: Opaque
data:
  {{- if $secret }}
  {{- toYaml $secret.data | nindent 2 }}
  {{- else }}
  tls.crt: {{ default $cert.Cert .Values.cert | b64enc }}
  tls.key: {{ default $cert.Key .Values.key | b64enc }}
  {{- end }}
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: tagger
webhooks:
- name: tag.tagger.dev
  admissionReviewVersions:
  - v1
  sideEffects: None
  clientConfig:
    service:
      name: mutating-webhooks
      namespace: {{ .Release.Namespace }}
      path: "/image"
      port: 8080
    {{- if $secret }}
    caBundle: {{ (index $secret "data" "server.crt") }}
    {{- else }}
    caBundle: {{ default $cert.Cert .Values.cert | b64enc }}
    {{- end }}
  rules:
  - apiGroups:
    - "tagger.dev"
    apiVersions:
    - "v1beta1"
    resources: 
    - images
    operations: 
    - CREATE
    - UPDATE
- name: imageimport.tagger.dev
  admissionReviewVersions:
  - v1
  sideEffects: None
  clientConfig:
    service:
      name: mutating-webhooks
      namespace: {{ .Release.Namespace }}
      path: "/imageimport"
      port: 8080
    {{- if $secret }}
    caBundle: {{ (index $secret "data" "server.crt") }}
    {{- else }}
    caBundle: {{ default $cert.Cert .Values.cert | b64enc }}
    {{- end }}
  rules:
  - apiGroups:
    - "tagger.dev"
    apiVersions:
    - "v1beta1"
    resources: 
    - imageimports
    operations: 
    - CREATE
    - UPDATE
