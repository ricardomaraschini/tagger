// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TagIOServiceClient is the client API for TagIOService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TagIOServiceClient interface {
	Export(ctx context.Context, in *Request, opts ...grpc.CallOption) (TagIOService_ExportClient, error)
	Import(ctx context.Context, opts ...grpc.CallOption) (TagIOService_ImportClient, error)
}

type tagIOServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTagIOServiceClient(cc grpc.ClientConnInterface) TagIOServiceClient {
	return &tagIOServiceClient{cc}
}

func (c *tagIOServiceClient) Export(ctx context.Context, in *Request, opts ...grpc.CallOption) (TagIOService_ExportClient, error) {
	stream, err := c.cc.NewStream(ctx, &TagIOService_ServiceDesc.Streams[0], "/pb.TagIOService/Export", opts...)
	if err != nil {
		return nil, err
	}
	x := &tagIOServiceExportClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TagIOService_ExportClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type tagIOServiceExportClient struct {
	grpc.ClientStream
}

func (x *tagIOServiceExportClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tagIOServiceClient) Import(ctx context.Context, opts ...grpc.CallOption) (TagIOService_ImportClient, error) {
	stream, err := c.cc.NewStream(ctx, &TagIOService_ServiceDesc.Streams[1], "/pb.TagIOService/Import", opts...)
	if err != nil {
		return nil, err
	}
	x := &tagIOServiceImportClient{stream}
	return x, nil
}

type TagIOService_ImportClient interface {
	Send(*ImportRequest) error
	CloseAndRecv() (*ImportResult, error)
	grpc.ClientStream
}

type tagIOServiceImportClient struct {
	grpc.ClientStream
}

func (x *tagIOServiceImportClient) Send(m *ImportRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tagIOServiceImportClient) CloseAndRecv() (*ImportResult, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ImportResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TagIOServiceServer is the server API for TagIOService service.
// All implementations must embed UnimplementedTagIOServiceServer
// for forward compatibility
type TagIOServiceServer interface {
	Export(*Request, TagIOService_ExportServer) error
	Import(TagIOService_ImportServer) error
	mustEmbedUnimplementedTagIOServiceServer()
}

// UnimplementedTagIOServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTagIOServiceServer struct {
}

func (UnimplementedTagIOServiceServer) Export(*Request, TagIOService_ExportServer) error {
	return status.Errorf(codes.Unimplemented, "method Export not implemented")
}
func (UnimplementedTagIOServiceServer) Import(TagIOService_ImportServer) error {
	return status.Errorf(codes.Unimplemented, "method Import not implemented")
}
func (UnimplementedTagIOServiceServer) mustEmbedUnimplementedTagIOServiceServer() {}

// UnsafeTagIOServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TagIOServiceServer will
// result in compilation errors.
type UnsafeTagIOServiceServer interface {
	mustEmbedUnimplementedTagIOServiceServer()
}

func RegisterTagIOServiceServer(s grpc.ServiceRegistrar, srv TagIOServiceServer) {
	s.RegisterService(&TagIOService_ServiceDesc, srv)
}

func _TagIOService_Export_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TagIOServiceServer).Export(m, &tagIOServiceExportServer{stream})
}

type TagIOService_ExportServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type tagIOServiceExportServer struct {
	grpc.ServerStream
}

func (x *tagIOServiceExportServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func _TagIOService_Import_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TagIOServiceServer).Import(&tagIOServiceImportServer{stream})
}

type TagIOService_ImportServer interface {
	SendAndClose(*ImportResult) error
	Recv() (*ImportRequest, error)
	grpc.ServerStream
}

type tagIOServiceImportServer struct {
	grpc.ServerStream
}

func (x *tagIOServiceImportServer) SendAndClose(m *ImportResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tagIOServiceImportServer) Recv() (*ImportRequest, error) {
	m := new(ImportRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TagIOService_ServiceDesc is the grpc.ServiceDesc for TagIOService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TagIOService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.TagIOService",
	HandlerType: (*TagIOServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Export",
			Handler:       _TagIOService_Export_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Import",
			Handler:       _TagIOService_Import_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "imagetags/pb/export_tag.proto",
}
