/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/ricardomaraschini/tagger/infra/images/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ImageImportLister helps list ImageImports.
// All objects returned here must be treated as read-only.
type ImageImportLister interface {
	// List lists all ImageImports in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.ImageImport, err error)
	// ImageImports returns an object that can list and get ImageImports.
	ImageImports(namespace string) ImageImportNamespaceLister
	ImageImportListerExpansion
}

// imageImportLister implements the ImageImportLister interface.
type imageImportLister struct {
	indexer cache.Indexer
}

// NewImageImportLister returns a new ImageImportLister.
func NewImageImportLister(indexer cache.Indexer) ImageImportLister {
	return &imageImportLister{indexer: indexer}
}

// List lists all ImageImports in the indexer.
func (s *imageImportLister) List(selector labels.Selector) (ret []*v1beta1.ImageImport, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.ImageImport))
	})
	return ret, err
}

// ImageImports returns an object that can list and get ImageImports.
func (s *imageImportLister) ImageImports(namespace string) ImageImportNamespaceLister {
	return imageImportNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ImageImportNamespaceLister helps list and get ImageImports.
// All objects returned here must be treated as read-only.
type ImageImportNamespaceLister interface {
	// List lists all ImageImports in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.ImageImport, err error)
	// Get retrieves the ImageImport from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.ImageImport, error)
	ImageImportNamespaceListerExpansion
}

// imageImportNamespaceLister implements the ImageImportNamespaceLister
// interface.
type imageImportNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ImageImports in the indexer for a given namespace.
func (s imageImportNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.ImageImport, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.ImageImport))
	})
	return ret, err
}

// Get retrieves the ImageImport from the indexer for a given namespace and name.
func (s imageImportNamespaceLister) Get(name string) (*v1beta1.ImageImport, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("imageimport"), name)
	}
	return obj.(*v1beta1.ImageImport), nil
}
