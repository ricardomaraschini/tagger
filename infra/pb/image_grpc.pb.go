// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImageIOServiceClient is the client API for ImageIOService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageIOServiceClient interface {
	Pull(ctx context.Context, in *Packet, opts ...grpc.CallOption) (ImageIOService_PullClient, error)
	Push(ctx context.Context, opts ...grpc.CallOption) (ImageIOService_PushClient, error)
}

type imageIOServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImageIOServiceClient(cc grpc.ClientConnInterface) ImageIOServiceClient {
	return &imageIOServiceClient{cc}
}

func (c *imageIOServiceClient) Pull(ctx context.Context, in *Packet, opts ...grpc.CallOption) (ImageIOService_PullClient, error) {
	stream, err := c.cc.NewStream(ctx, &ImageIOService_ServiceDesc.Streams[0], "/pb.ImageIOService/Pull", opts...)
	if err != nil {
		return nil, err
	}
	x := &imageIOServicePullClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ImageIOService_PullClient interface {
	Recv() (*Packet, error)
	grpc.ClientStream
}

type imageIOServicePullClient struct {
	grpc.ClientStream
}

func (x *imageIOServicePullClient) Recv() (*Packet, error) {
	m := new(Packet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *imageIOServiceClient) Push(ctx context.Context, opts ...grpc.CallOption) (ImageIOService_PushClient, error) {
	stream, err := c.cc.NewStream(ctx, &ImageIOService_ServiceDesc.Streams[1], "/pb.ImageIOService/Push", opts...)
	if err != nil {
		return nil, err
	}
	x := &imageIOServicePushClient{stream}
	return x, nil
}

type ImageIOService_PushClient interface {
	Send(*Packet) error
	CloseAndRecv() (*Packet, error)
	grpc.ClientStream
}

type imageIOServicePushClient struct {
	grpc.ClientStream
}

func (x *imageIOServicePushClient) Send(m *Packet) error {
	return x.ClientStream.SendMsg(m)
}

func (x *imageIOServicePushClient) CloseAndRecv() (*Packet, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Packet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ImageIOServiceServer is the server API for ImageIOService service.
// All implementations must embed UnimplementedImageIOServiceServer
// for forward compatibility
type ImageIOServiceServer interface {
	Pull(*Packet, ImageIOService_PullServer) error
	Push(ImageIOService_PushServer) error
	mustEmbedUnimplementedImageIOServiceServer()
}

// UnimplementedImageIOServiceServer must be embedded to have forward compatible implementations.
type UnimplementedImageIOServiceServer struct {
}

func (UnimplementedImageIOServiceServer) Pull(*Packet, ImageIOService_PullServer) error {
	return status.Errorf(codes.Unimplemented, "method Pull not implemented")
}
func (UnimplementedImageIOServiceServer) Push(ImageIOService_PushServer) error {
	return status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedImageIOServiceServer) mustEmbedUnimplementedImageIOServiceServer() {}

// UnsafeImageIOServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageIOServiceServer will
// result in compilation errors.
type UnsafeImageIOServiceServer interface {
	mustEmbedUnimplementedImageIOServiceServer()
}

func RegisterImageIOServiceServer(s grpc.ServiceRegistrar, srv ImageIOServiceServer) {
	s.RegisterService(&ImageIOService_ServiceDesc, srv)
}

func _ImageIOService_Pull_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Packet)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImageIOServiceServer).Pull(m, &imageIOServicePullServer{stream})
}

type ImageIOService_PullServer interface {
	Send(*Packet) error
	grpc.ServerStream
}

type imageIOServicePullServer struct {
	grpc.ServerStream
}

func (x *imageIOServicePullServer) Send(m *Packet) error {
	return x.ServerStream.SendMsg(m)
}

func _ImageIOService_Push_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImageIOServiceServer).Push(&imageIOServicePushServer{stream})
}

type ImageIOService_PushServer interface {
	SendAndClose(*Packet) error
	Recv() (*Packet, error)
	grpc.ServerStream
}

type imageIOServicePushServer struct {
	grpc.ServerStream
}

func (x *imageIOServicePushServer) SendAndClose(m *Packet) error {
	return x.ServerStream.SendMsg(m)
}

func (x *imageIOServicePushServer) Recv() (*Packet, error) {
	m := new(Packet)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ImageIOService_ServiceDesc is the grpc.ServiceDesc for ImageIOService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageIOService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ImageIOService",
	HandlerType: (*ImageIOServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Pull",
			Handler:       _ImageIOService_Pull_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Push",
			Handler:       _ImageIOService_Push_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "infra/pb/image.proto",
}
